#!/usr/bin/env python
"""
Update the maps of builtin types and names.

You can update this file by executing it, using the PG* env var to connect
"""

import os
import re
import subprocess as sp
from typing import List


version_sql = """
select format($$
# Generated from PostgreSQL %s.%s
$$,
        setting::int / 10000, setting::int % 100)   -- assume PG >= 10
    from pg_settings
    where name = 'server_version_num'
"""

py_oids_sql = """
select format(
        '(%L, %s, %s, %L, %L),',
        typname, oid, typarray, oid::regtype, typdelim)
    from pg_type
    where oid < 10000
    and typname !~ all('{^(_|pg_|reg),_handler$}')
    order by typname
"""


cython_oids_sql = """
select format('%s_OID = %s', upper(typname), oid)
    from pg_type
    where oid < 10000
    and typname !~ all('{^(_|pg_|reg),_handler$}')
    order by typname
"""


def update_python_oids() -> None:
    queries = [version_sql, py_oids_sql]
    fn = os.path.dirname(__file__) + "/../psycopg3/psycopg3/oids.py"
    update_file(fn, queries)


def update_cython_oids() -> None:
    queries = [version_sql, cython_oids_sql]
    fn = os.path.dirname(__file__) + "/../psycopg3_c/_psycopg3/oids.pxd"
    update_file(fn, queries)


def update_file(fn: str, queries: List[str]) -> None:
    with open(fn, "rb") as f:
        lines = f.read().splitlines()

    new = []
    for query in queries:
        out = sp.run(
            ["psql", "-AXqt", "-c", query], stdout=sp.PIPE, check=True
        )
        new.extend(out.stdout.splitlines())

    new = [b" " * 4 + line if line else b"" for line in new]  # indent
    istart, iend = [
        i
        for i, line in enumerate(lines)
        if re.match(br"\s*#\s*autogenerated:\s+(start|end)", line)
    ]
    lines[istart + 1 : iend] = new

    with open(fn, "wb") as f:
        f.write(b"\n".join(lines))
        f.write(b"\n")


if __name__ == "__main__":
    update_python_oids()
    update_cython_oids()
